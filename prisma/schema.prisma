// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core Authentication & Tenant Model
model User {
  id             String       @id @default(uuid())
  email          String?      @unique
  hashedPassword String? // Set if using custom auth, otherwise Supabase handles it
  fullName       String?
  avatarUrl      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tenants        TenantUser[] // User can be part of multiple tenants
  createdTenants Tenant[]     @relation("TenantCreator") // If a user can create tenants
}

model Tenant {
  id             String  @id @default(uuid())
  name           String
  subdomain      String  @unique // e.g., company.yourapp.com
  logoUrl        String?
  primaryColor   String?
  secondaryColor String?
  ownerId        String // ID of the User who created/owns the tenant
  owner          User    @relation("TenantCreator", fields: [ownerId], references: [id])

  members      TenantUser[]
  companies    Company[]
  leads        Lead[]
  products     Product[]
  quotes       Quote[]
  tasks        Task[]
  projects     Project[]
  tags         Tag[]
  chatbotFlows ChatbotFlow[] // Added ChatbotFlow relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

// Joins User to Tenant with a role
model TenantUser {
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     String // e.g., "admin", "agent", "viewer" - maps to Role name or ID

  assignedLeads      Lead[]              @relation("LeadAssignedTo")
  assignedTasks      Task[]              @relation("TaskAssignedTo")
  projectMemberships ProjectTeamMember[] // User's project memberships within this tenant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tenantId, userId]) // Composite primary key
  @@index([userId])
}

// CRM Models
model Company {
  id                String  @id @default(uuid())
  tenantId          String
  tenant            Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  email             String? @unique // Unique within a tenant if not globally unique
  phone             String?
  website           String?
  addressStreet     String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  description       String?
  industry          String?
  annualRevenue     Float?
  numberOfEmployees Int?

  leads Lead[] // A company can have multiple leads associated

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // For soft deletes
  Project   Project[]

  @@index([tenantId])
  @@index([tenantId, email])
}

model Lead {
  id                String     @id @default(uuid())
  tenantId          String
  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String // Lead's full name or primary contact name
  email             String?
  phone             String?
  status            LeadStatus @default(NEW)
  source            LeadSource @default(Manual)
  notes             String?
  lastContacted     DateTime?
  opportunityValue  Float? // Estimated value of the lead/opportunity
  expectedCloseDate DateTime?

  companyId String? // Optional: If lead is associated with a specific company
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  assignedToUserId String? // References TenantUser.userId
  assignedTo       TenantUser? @relation("LeadAssignedTo", fields: [tenantId, assignedToUserId], references: [tenantId, userId], onDelete: NoAction, onUpdate: Cascade)

  quotes   Quote[]   @relation("LeadQuotes") // A lead can have multiple quotes
  tasks    Task[]    @relation("LeadTasks") // Tasks related to this lead
  projects Project[] @relation("LeadProjects") // Projects originating from this lead

  // For chatbot integration:
  chatbotFlowState  Json? // Store current state if lead is interacting with a flow
  channelSpecificId String? // e.g., WhatsApp ID, Messenger PSID (unique per channel for this tenant)

  tags LeadTag[] // Many-to-many with Tag

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, email]) // Email should be unique per tenant for leads
  @@index([tenantId])
  @@index([companyId])
  @@index([tenantId, assignedToUserId])
  @@index([channelSpecificId, tenantId])
}

model Product {
  id          String      @id @default(uuid())
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  type        ProductType // PRODUCTO or SERVICIO
  description String?
  price       Decimal     @db.Decimal(10, 2) // Assuming price up to 99,999,999.99
  sku         String? // Stock Keeping Unit, unique per tenant
  category    String?
  isActive    Boolean     @default(true)

  quoteLineItems QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, sku])
  @@index([tenantId])
}

model Quote {
  id            String      @id @default(uuid())
  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber   String // e.g., QT-2024-001, unique per tenant
  opportunityId String // Foreign key to Lead.id (Lead acts as Opportunity)
  opportunity   Lead        @relation("LeadQuotes", fields: [opportunityId], references: [id], onDelete: Cascade) // If lead is deleted, quotes are too
  dateCreated   DateTime    @default(now())
  expiryDate    DateTime?
  status        QuoteStatus @default(DRAFT)
  notes         String?

  lineItems QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, quoteNumber])
  @@index([tenantId])
  @@index([opportunityId])
}

model QuoteLineItem {
  id        String  @id @default(uuid())
  tenantId  String // To ensure data segregation, though primarily linked via Quote
  quoteId   String
  quote     Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade) // If quote is deleted, line items are too
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent deleting product if it's in a quote
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2) // Price at the time of quote creation

  // total is usually calculated: quantity * unitPrice

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // If soft delete is needed for line items specifically

  @@index([quoteId])
  @@index([productId])
  @@index([tenantId]) // For queries scoped to tenant
}

model Task {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      TaskStatus    @default(PENDING)
  dueDate     DateTime?
  priority    TaskPriority? @default(MEDIUM)

  assignedToUserId String? // References TenantUser.userId
  assignedTo       TenantUser? @relation("TaskAssignedTo", fields: [tenantId, assignedToUserId], references: [tenantId, userId], onDelete: NoAction, onUpdate: Cascade)

  relatedToLeadId String?
  relatedToLead   Lead?   @relation("LeadTasks", fields: [relatedToLeadId], references: [id], onDelete: SetNull) // If lead deleted, task unlinks

  relatedToProjectId String?
  relatedToProject   Project? @relation("ProjectTasks", fields: [relatedToProjectId], references: [id], onDelete: SetNull) // If project deleted, task unlinks

  tags TaskTag[] // Many-to-many with Tag

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
  @@index([tenantId, assignedToUserId])
  @@index([relatedToLeadId])
  @@index([relatedToProjectId])
}

model Project {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?

  companyId String? // Optional: Project for a specific company
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  opportunityId String? // Optional: Project originating from a Lead/Opportunity
  opportunity   Lead?   @relation("LeadProjects", fields: [opportunityId], references: [id], onDelete: SetNull)

  teamMembers ProjectTeamMember[]
  tasks       Task[]              @relation("ProjectTasks")
  tags        ProjectTag[] // Many-to-many with Tag

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
  @@index([companyId])
  @@index([opportunityId])
}

model ProjectTeamMember {
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String // This is the TenantUser's userId part of its composite key
  member    TenantUser @relation(fields: [tenantId, userId], references: [tenantId, userId], onDelete: Cascade, onUpdate: Cascade) // Reference TenantUser
  tenantId  String // Explicit tenantId for the join table itself, aligns with Project and TenantUser tenantId

  assignedAt DateTime @default(now())

  @@id([projectId, userId, tenantId]) // Composite primary key for the join table
  @@index([userId, tenantId]) // Index for querying user's projects
  @@index([tenantId])
}

model Tag {
  id       String  @id @default(uuid())
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name     String // Tag name, e.g., "VIP", "FollowUp"
  color    String? // Optional color for the tag

  leadTags    LeadTag[]
  taskTags    TaskTag[]
  projectTags ProjectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name]) // Tag names should be unique per tenant
  @@index([tenantId])
}

// Join table for Lead and Tag (Many-to-Many)
model LeadTag {
  leadId   String
  lead     Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId String // For data segregation and to match Lead and Tag tenantId

  assignedAt DateTime @default(now())

  @@id([leadId, tagId, tenantId])
  @@index([tenantId, tagId]) // To find all leads with a specific tag within a tenant
  @@index([tenantId])
}

// Join table for Task and Tag (Many-to-Many)
model TaskTag {
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId String // For data segregation

  assignedAt DateTime @default(now())

  @@id([taskId, tagId, tenantId])
  @@index([tenantId, tagId])
  @@index([tenantId])
}

// Join table for Project and Tag (Many-to-Many)
model ProjectTag {
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId  String // For data segregation

  assignedAt DateTime @default(now())

  @@id([projectId, tagId, tenantId])
  @@index([tenantId, tagId])
  @@index([tenantId])
}

// Model for Chatbot Flows
model ChatbotFlow {
  id              String     @id @default(uuid())
  tenantId        String
  tenant          Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  definition      Json // Store the flow structure as JSON (nodes, edges, configurations)
  status          FlowStatus @default(DRAFT) // DRAFT, PUBLISHED, ARCHIVED
  version         Int        @default(1)
  lastPublishedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
}

// Enums
enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED // Converted to customer/won deal associated with this lead
  CLOSED_WON // Explicitly won
  CLOSED_LOST
  UNQUALIFIED
  ARCHIVED
}

enum LeadSource {
  WhatsApp
  WebChat
  Messenger
  Instagram
  Manual // Entered manually
  Referral
  API
  Other
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

enum FlowStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
