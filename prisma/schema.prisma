// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Core Multi-Tenancy & Users ---
model Tenant {
  id                  String    @id @default(cuid())
  name                String
  subdomain           String    @unique
  logoUrl             String?   // Para el logo del inquilino
  brandColorPrimary   String?   // Ej: "#RRGGBB"
  brandColorSecondary String?   // Ej: "#RRGGBB"
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  users             TenantUser[]
  roles             Role[]
  connectedChannels ConnectedChannel[]
  leads             Lead[]
  companies         Company[]
  opportunities     Opportunity[]
  quotes            Quote[]
  projects          Project[]
  tasks             Task[]
  products          Product[]
  flows             Flow[]
  tags              Tag[]
  activityLogs      ActivityLog[]
  apiKeys           ApiKey[]
  notifications     Notification[]

  @@index([subdomain])
}

// User within a specific tenant, linking to Supabase Auth User
model TenantUser {
  id                 String   @id @default(cuid())
  supabaseAuthUserId String   // ID del usuario en Supabase Auth
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleId             String
  role               Role     @relation(fields: [roleId], references: [id])
  fullName           String?
  email              String   // Se puede denormalizar aquí para facilitar consultas
  avatarUrl          String?
  isActive           Boolean  @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  assignedLeads         Lead[]          @relation("AssignedLeadToUser")
  assignedOpportunities Opportunity[]   @relation("AssignedOpportunityToUser")
  assignedProjects      Project[]       @relation("AssignedProjectToUser")
  assignedTasks         Task[]          @relation("AssignedTaskToUser")
  createdTasks          Task[]          @relation("CreatedTaskByUser")
  authoredMessages      Message[]
  activityLogs          ActivityLog[]
  notifications         Notification[]  @relation("NotificationToUser") // Notificaciones para este usuario

  @@unique([supabaseAuthUserId, tenantId]) // Un usuario de Supabase solo puede estar una vez por tenant
  @@index([tenantId])
  @@index([roleId])
  @@index([email])
}

// --- Roles & Permissions ---
model Role {
  id          String   @id @default(cuid())
  name        String   // Ej: "Administrator", "Agent Supervisor", "Agent"
  description String?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  isSystemRole Boolean @default(false) // Para roles por defecto que no se pueden borrar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       TenantUser[]
  permissions RolePermission[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model Permission {
  id          String   @id @default(cuid()) // Ej: "view_all_conversations", "manage_leads"
  name        String   @unique // Nombre legible, ej: "View All Conversations"
  category    String   // Ej: "Conversations", "CRM", "Settings"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// --- Channel Connections ---
model ConnectedChannel {
  id             String   @id @default(cuid())
  instanceName   String
  channelTypeId  String   // Ej: "whatsapp", "messenger", "webchat"
  status         String   // Ej: "connected", "disconnected", "pending_webhook"
  webhookUrl     String?
  verifyToken    String?
  details        String?  // JSON o texto formateado para detalles específicos del canal
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversations Conversation[]

  @@index([tenantId])
}

// --- Conversations & Messages ---
model Conversation {
  id                 String   @id @default(cuid())
  channelId          String   // ID de la instancia de ConnectedChannel
  channel            ConnectedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  externalContactId  String?  // ID del contacto en la plataforma externa (ej: WhatsApp ID)
  contactName        String?
  contactAvatarUrl   String?
  lastMessageSnippet String?
  lastMessageAt      DateTime @default(now())
  status             String   @default("OPEN") // Ej: "OPEN", "CLOSED", "ARCHIVED", "ASSIGNED"
  assignedToUserId   String?
  assignedTo         TenantUser? @relation("AssignedConversationToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  tenantId           String
  tenant             Tenant     @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  messages Message[]
  tags     ConversationTag[]

  @@index([tenantId])
  @@index([channelId])
  @@index([assignedToUserId])
  @@index([status])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderType     SenderType   // USER, AGENT, SYSTEM
  senderId       String?      // TenantUser.id si es AGENT, externalContactId si es USER
  author         TenantUser?  @relation(fields: [senderId], references: [id], onDelete: SetNull) // Si el sender es un TenantUser
  content        String
  messageType    MessageType  @default(TEXT) // TEXT, IMAGE, INTERACTIVE_BUTTONS, etc.
  payload        Json?        // Para datos adicionales como botones, imágenes, etc.
  timestamp      DateTime     @default(now())
  isReadByAgent  Boolean      @default(false)
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
  @@index([tenantId])
  @@index([timestamp])
}

enum SenderType {
  USER
  AGENT
  BOT // O SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  INTERACTIVE_BUTTONS
  INTERACTIVE_LIST
  TEMPLATE
  PRODUCT
  LOCATION
  SYSTEM_EVENT
}

// --- CRM ---
model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?
  phone       String?
  address     String?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leads         Lead[]
  opportunities Opportunity[]

  @@index([tenantId])
  @@index([name])
}

model Lead {
  id             String      @id @default(cuid())
  name           String
  email          String?
  phone          String?
  source         String?     // Ej: "WhatsApp", "Web Chat", "Manual"
  status         LeadStatus  @default(NEW)
  companyId      String?
  company        Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)
  assignedToId   String?
  assignedTo     TenantUser? @relation("AssignedLeadToUser", fields: [assignedToId], references: [id], onDelete: SetNull)
  lastContacted  DateTime?
  tenantId       String
  tenant         Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  opportunities Opportunity[]
  tags          LeadTag[]
  tasks         Task[] @relation("TasksForLead")


  @@index([tenantId])
  @@index([email])
  @@index([status])
  @@index([assignedToId])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED // Convertido a Oportunidad
  LOST
  UNQUALIFIED
}

model Opportunity {
  id               String            @id @default(cuid())
  name             String
  leadId           String?           // Opcional si la oportunidad no viene de un Lead
  lead             Lead?             @relation(fields: [leadId], references: [id], onDelete: SetNull)
  companyId        String?
  company          Company?          @relation(fields: [companyId], references: [id], onDelete: SetNull)
  status           OpportunityStatus @default(QUALIFICATION)
  expectedValue    Float?
  expectedCloseDate DateTime?
  assignedToId     String?
  assignedTo       TenantUser?       @relation("AssignedOpportunityToUser", fields: [assignedToId], references: [id], onDelete: SetNull)
  tenantId         String
  tenant           Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  quotes  Quote[]
  tasks   Task[]     @relation("TasksForOpportunity")
  project Project?   // Si la oportunidad ganada se convierte en proyecto

  @@index([tenantId])
  @@index([status])
  @@index([assignedToId])
}

enum OpportunityStatus {
  QUALIFICATION
  NEEDS_ANALYSIS
  PROPOSAL_SENT
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  ON_HOLD
}

model Product {
  id           String        @id @default(cuid())
  name         String
  type         ProductType   @default(PRODUCT) // PRODUCTO, SERVICIO
  description  String?
  price        Float
  sku          String?
  category     String?
  isActive     Boolean       @default(true)
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  quoteLineItems QuoteLineItem[]

  @@index([tenantId])
  @@index([name])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Quote {
  id            String      @id @default(cuid())
  quoteNumber   String      @unique // Podría generarse programáticamente
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  dateCreated   DateTime    @default(now())
  expiryDate    DateTime?
  status        QuoteStatus @default(DRAFT)
  totalAmount   Float       // Calculado a partir de lineItems
  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  lineItems QuoteLineItem[]

  @@index([tenantId])
  @@index([opportunityId])
  @@index([status])
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED
}

model QuoteLineItem {
  id          String   @id @default(cuid())
  quoteId     String
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id]) // No borra el producto si se borra el item
  productName String   // Denormalizado para historial
  quantity    Int
  unitPrice   Float    // Denormalizado para historial
  total       Float    // quantity * unitPrice
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([quoteId])
  @@index([productId])
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus  @default(PLANNING)
  opportunityId  String?        @unique // De qué oportunidad vino este proyecto
  opportunity    Opportunity?   @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  clientName     String?        // O podría relacionarse con Lead/Company
  assignedToId   String?
  assignedTo     TenantUser?    @relation("AssignedProjectToUser", fields: [assignedToId], references: [id], onDelete: SetNull)
  progress       Int?           @db.SmallInt // 0-100
  deadline       DateTime?
  tenantId       String
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  tasks Task[] @relation("TasksForProject")
  tags  ProjectTag[]

  @@index([tenantId])
  @@index([status])
  @@index([assignedToId])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

model Task {
  id            String        @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus    @default(PENDING)
  priority      TaskPriority? @default(MEDIUM)
  dueDate       DateTime?
  completedAt   DateTime?
  assignedToId  String?
  assignedTo    TenantUser?   @relation("AssignedTaskToUser", fields: [assignedToId], references: [id], onDelete: SetNull)
  createdById   String?
  createdBy     TenantUser?   @relation("CreatedTaskByUser", fields: [createdById], references: [id], onDelete: SetNull)
  projectId     String?
  project       Project?      @relation("TasksForProject", fields: [projectId], references: [id], onDelete: SetNull)
  opportunityId String?
  opportunity   Opportunity?  @relation("TasksForOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  leadId        String?
  lead          Lead?         @relation("TasksForLead", fields: [leadId], references: [id], onDelete: SetNull)
  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  tags TaskTag[]

  @@index([tenantId])
  @@index([status])
  @@index([assignedToId])
  @@index([projectId])
  @@index([opportunityId])
  @@index([leadId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

// --- General Purpose Tagging System ---
model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?  // Ej: "#RRGGBB"
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leadTags      LeadTag[]
  projectTags   ProjectTag[]
  taskTags      TaskTag[]
  conversationTags ConversationTag[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model LeadTag {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([leadId, tagId])
  @@index([leadId])
  @@index([tagId])
}

model ProjectTag {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model TaskTag {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}

model ConversationTag {
  id              String        @id @default(cuid())
  conversationId  String
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  tagId           String
  tag             Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt      DateTime      @default(now())

  @@unique([conversationId, tagId])
  @@index([conversationId])
  @@index([tagId])
}


// --- Flow Builder ---
model Flow {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  nodesJson      Json?    // Almacenar la estructura de nodos como JSON
  edgesJson      Json?    // Almacenar la estructura de aristas como JSON
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lastModifiedAt DateTime @updatedAt
  createdAt      DateTime @default(now())

  @@index([tenantId])
}

// --- Activity Log ---
model ActivityLog {
  id                 String      @id @default(cuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String?     // TenantUser.id
  user               TenantUser? @relation(fields: [userId], references: [id], onDelete: SetNull)
  action             String      // Ej: "LEAD_CREATED", "USER_LOGGED_IN", "FLOW_PUBLISHED"
  entityType         String?     // Ej: "Lead", "User", "Flow"
  entityId           String?
  details            Json?       // Detalles adicionales sobre la acción
  ipAddress          String?
  userAgent          String?
  timestamp          DateTime    @default(now())

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
}

// --- Notifications ---
model Notification {
  id          String      @id @default(cuid())
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String      // TenantUser.id a quien va dirigida la notificación
  user        TenantUser  @relation("NotificationToUser", fields: [userId], references: [id], onDelete: Cascade)
  type        String      // Ej: "NEW_MESSAGE", "TASK_ASSIGNED", "MENTION"
  title       String
  message     String
  isRead      Boolean     @default(false)
  readAt      DateTime?
  link        String?     // Enlace a la entidad relevante (ej: /dashboard?conversationId=xyz)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([tenantId])
  @@index([userId, isRead])
}


// --- API Keys ---
model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String   // Nombre descriptivo para la clave
  hashedKey   String   @unique // La clave real hasheada, nunca se almacena en texto plano
  prefix      String   @unique // Los primeros caracteres de la clave, para mostrar al usuario
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // permissions ApiKeyPermission[] // Futuro: permisos granulares por API Key

  @@index([tenantId])
}
