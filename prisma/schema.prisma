
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                String       @id @default(uuid())
  name              String
  subdomain         String       @unique
  logoUrl           String?
  primaryColor      String?
  secondaryColor    String?
  ownerId             String?      @unique // Initially null, set after user confirms
  owner               User?                @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  users             TenantUser[]
  companies         Company[]
  contacts          Contact[]
  opportunities     Opportunity[]
  leads             Lead[]
  products          Product[]
  quotes            Quote[]
  tasks             Task[]
  projects          Project[]
  tags              Tag[]
  permissions       Permission[] // Permissions defined specifically for this tenant
  roles             Role[] // Roles defined specifically for this tenant
  rolePermissions   RolePermission[]
  projectTeamMember ProjectTeamMember[]
  taskTags          TaskTag[]
  projectTags       ProjectTag[]
  leadTags          LeadTag[]
  quoteLineItems    QuoteLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Authentication user model (managed by Supabase Auth or similar)
model User {
  id            String     @id @unique // Corresponds to Supabase Auth user ID
  email         String     @unique
  fullName      String?
  avatarUrl     String?
  tenants       Tenant[] // If a user can own multiple tenants (optional)
  tenantUsers   TenantUser[] // User's memberships across different tenants
  opportunities Opportunity[] // Opportunities assigned to this user (globally, if not using TenantUser for assignment)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Joins User with Tenant and assigns a Role within that Tenant
model TenantUser {
  id        String  @id @default(uuid())
  userId    String
  tenantId  String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleId    String
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Restrict) // Each user has one role in a tenant
  fullName  String? // Can be specific to the tenant context or synced from User.fullName
  email     String? // Can be specific to the tenant context or synced from User.email
  avatarUrl String? // Specific avatar for this tenant context

  assignedOpportunities Opportunity[]         @relation("OpportunityAssignedToUser")
  assignedLeads         Lead[]                @relation("LeadAssignedToUser")
  assignedTasks         Task[]                @relation("TaskAssignedToUser")
  projectMemberships    ProjectTeamMember[]
  // conversations Conversation[] // If you track conversations assigned to users

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, tenantId])
  @@index([roleId])
}

model Role {
  id                String             @id @default(uuid())
  tenantId          String? // Null if global/system role, set if tenant-specific
  tenant            Tenant?            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String // e.g., "Administrator", "Agent", "Marketing Manager"
  description       String?
  isSystemRole      Boolean            @default(false) // True for predefined system roles
  users             TenantUser[] // Users who have this role (inverse relation)
  rolePermissions   RolePermission[]   // Permissions associated with this role
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?

  @@unique([tenantId, name], name: "tenant_role_name_unique")
}

model Permission {
  id              String           @id @default(uuid())
  tenantId        String? // Null if global/system permission, set if tenant-specific for custom permissions
  tenant          Tenant?          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category        String // e.g., "CRM", "Marketing", "Settings"
  action          String // e.g., "create_lead", "view_analytics", "manage_users"
  name            String // User-friendly name, e.g., "Create Leads"
  description     String?
  rolePermissions RolePermission[] // Roles that have this permission

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, category, action], name: "tenant_permission_unique")
}

model RolePermission {
  roleId       String
  permissionId String
  tenantId     String // Ensures permission assignment is tenant-scoped even if roles/perms are global
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([roleId, permissionId, tenantId])
}

// CRM Models
model Company {
  id                String    @id @default(uuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  email             String?   @unique // Should be unique within a tenant if not globally
  phone             String?
  website           String?
  addressStreet     String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  description       String?   @db.Text
  industry          String?
  annualRevenue     Float?
  numberOfEmployees Int?

  contacts      Contact[]
  opportunities Opportunity[]
  leads         Lead[] // Leads associated with this company
  projects      Project[]     @relation("ProjectCompany") // Projects for this company

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
  @@unique([tenantId, email], name: "tenant_company_email_unique")
}

model Contact {
  id            String    @id @default(uuid())
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  email         String?   @unique // Unique within tenant
  phone         String?
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  role          String? // e.g., "Manager", "Decision Maker"
  description   String?   @db.Text
  opportunities Opportunity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, companyId])
  @@unique([tenantId, email], name: "tenant_contact_email_unique")
}

// Keeping Opportunity separate as it's a core CRM concept
model Opportunity {
  id                 String      @id @default(uuid())
  tenantId           String
  tenant             Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String // e.g., "Website Redesign Project for Acme"
  description        String?     @db.Text
  amount             Float? // Potential deal value
  stage              String // e.g., "Prospecting", "Qualification", "Proposal", "Negotiation", "Closed Won", "Closed Lost"
  probability        Float? // % chance of closing
  expectedCloseDate  DateTime?
  companyId          String?
  company            Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)
  primaryContactId   String?
  primaryContact     Contact?    @relation(fields: [primaryContactId], references: [id], onDelete: SetNull)
  assignedToUserId   String?
  assignedTo         TenantUser? @relation("OpportunityAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  leadSource         String? // e.g., "Web Form", "Referral", "Cold Call"
  lostReason         String?

  // Relationships
  // tasks Task[] // Tasks related to this opportunity
  // quotes Quote[] // Quotes sent for this opportunity

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, companyId, assignedToUserId])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED // Indicates lead is now an opportunity or customer
  CLOSED_WON // If lead directly converts to sale without separate opportunity stage
  CLOSED_LOST
  UNQUALIFIED
  ARCHIVED
}

enum LeadSource {
  WhatsApp
  WebChat
  Messenger
  Instagram
  Manual
  Referral
  API
  Other
}

model Lead {
  id                 String       @id @default(uuid())
  tenantId           String
  tenant             Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String // Full name of the lead
  email              String?
  phone              String?
  companyId          String? // Optional: if the lead is associated with a known company
  company            Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  source             LeadSource   @default(Manual)
  status             LeadStatus   @default(NEW)
  notes              String?      @db.Text
  assignedToUserId   String?
  assignedTo         TenantUser?  @relation("LeadAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  lastContacted      DateTime?
  convertedToOpportunityId String? @unique // If converted, links to the Opportunity ID
  // opportunity        Opportunity? @relation(fields: [convertedToOpportunityId], references: [id])
  chatbotFlowState   Json? // Store state if lead is in a chatbot flow

  tags      LeadTag[]
  quotes    Quote[] // Quotes generated for this lead/opportunity
  tasksRelatedToLead Task[]       @relation("TaskRelatedToLead")
  projectsFromOpportunity Project[]  @relation("ProjectOpportunity")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, companyId, assignedToUserId, status, source])
  @@unique([tenantId, email], name: "tenant_lead_email_unique")
}

model Tag {
  id          String @id @default(uuid())
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String // e.g., "VIP", "Follow Up Required", "Product Interest: X"
  color       String? // Hex color for the tag
  leadTags    LeadTag[]
  taskTags    TaskTag[]
  projectTags ProjectTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, name], name: "tenant_tag_name_unique")
}

model LeadTag {
  leadId   String
  tagId    String
  tenantId String
  lead     Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction) // NoAction to avoid multi-cascade paths

  assignedAt DateTime @default(now())

  @@id([leadId, tagId, tenantId])
  @@index([tenantId])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Product {
  id            String  @id @default(uuid())
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  type          ProductType
  description   String? @db.Text
  price         Float
  sku           String? // Stock Keeping Unit
  category      String?
  isActive      Boolean @default(true) // If product is currently offered
  quoteLineItems QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, type, category, isActive])
  @@unique([tenantId, sku], name: "tenant_product_sku_unique")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED
}

model Quote {
  id             String   @id @default(uuid())
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber    String // e.g., QT-2024-001
  opportunityId  String? // Could be LeadId if Opportunity model is not separate
  opportunity    Lead?    @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  dateCreated    DateTime @default(now())
  expiryDate     DateTime?
  status         QuoteStatus @default(DRAFT)
  subtotal       Float    @default(0)
  discountAmount Float?   @default(0)
  taxAmount      Float?   @default(0)
  totalAmount    Float    @default(0)
  notes          String?  @db.Text
  terms          String?  @db.Text

  lineItems QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, opportunityId, status])
  @@unique([tenantId, quoteNumber])
}

model QuoteLineItem {
  id                 String   @id @default(uuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteId            String
  quote              Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId          String
  product            Product  @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent product deletion if in quote
  productName        String // Snapshot of product name at time of quote
  productDescription String?  @db.Text // Snapshot of product description
  quantity           Int
  unitPrice          Float // Snapshot of unit price
  total              Float // quantity * unitPrice

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, quoteId, productId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id                 String        @id @default(uuid())
  tenantId           String
  tenant             Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title              String
  description        String?       @db.Text
  status             TaskStatus    @default(PENDING)
  priority           TaskPriority? @default(MEDIUM)
  dueDate            DateTime?
  completedAt        DateTime?
  assignedToUserId   String?
  assignedTo         TenantUser?   @relation("TaskAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  relatedToLeadId    String?
  relatedToLead      Lead?         @relation("TaskRelatedToLead", fields: [relatedToLeadId], references: [id], onDelete: SetNull)
  relatedToContactId String?
  // relatedToContact Contact? @relation(fields: [relatedToContactId], references: [id], onDelete: SetNull)
  relatedToProjectId String?
  relatedToProject   Project?      @relation(fields: [relatedToProjectId], references: [id], onDelete: SetNull)

  tags TaskTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, assignedToUserId, status, priority, dueDate])
}

model TaskTag {
  taskId   String
  tagId    String
  tenantId String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction)

  assignedAt DateTime @default(now())

  @@id([taskId, tagId, tenantId])
  @@index([tenantId])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

model Project {
  id                String              @id @default(uuid())
  tenantId          String
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  description       String?             @db.Text
  status            ProjectStatus       @default(PLANNING)
  startDate         DateTime?
  endDate           DateTime? // Expected or actual
  deadline          DateTime?
  budget            Float?
  companyId         String?             // Client company
  company           Company?            @relation("ProjectCompany", fields: [companyId], references: [id], onDelete: SetNull)
  opportunityId     String?             // Opportunity this project originated from
  opportunity       Lead?               @relation("ProjectOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull) // Using Lead as Opportunity for now
  tasks             Task[]              // Tasks related to this project
  teamMembers       ProjectTeamMember[] // Team members assigned to this project
  tags              ProjectTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, companyId, status])
}

model ProjectTeamMember {
  projectId      String
  tenantUserId   String // This is the ID from TenantUser model
  tenantId       String
  project        Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenantUser     TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: NoAction)
  roleInProject  String? // e.g., "Project Manager", "Developer", "Designer"

  assignedAt DateTime @default(now())

  @@id([projectId, tenantUserId, tenantId])
  @@index([tenantId])
}

model ProjectTag {
  projectId String
  tagId     String
  tenantId  String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: NoAction)

  assignedAt DateTime @default(now())

  @@id([projectId, tagId, tenantId])
  @@index([tenantId])
}
