// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Uses connection pooling
  directUrl = env("DIRECT_URL") // Used for migrations
}

model Tenant {
  id          String    @id @default(cuid())
  name        String
  subdomain   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  channels    Channel[]
  flows       Flow[]
  leads       Lead[]
  products    Product[]
  quotes      Quote[]
  tasks       Task[]
  projects    Project[]
  sdkConfig   SdkConfiguration?

  // Relation to User (assuming a tenant can have multiple users)
  // users User[] already defined above

  // Relation to Channel (assuming a tenant can have multiple channels)
  // channels Channel[] already defined above

  // Relation to Flow (assuming a tenant can have multiple flows)
  // flows Flow[] already defined above

  // Relation to Lead (assuming a tenant can have multiple leads)
  // leads Lead[] already defined above

  // Relation to Product (assuming a tenant can have multiple products/services)
  // products Product[] already defined above

  // Relation to Quote (assuming a tenant can issue multiple quotes)
  // quotes Quote[] already defined above

  // Relation to Task (assuming a tenant can have multiple tasks)
  // tasks Task[] already defined above

  // Relation to Project (assuming a tenant can have multiple projects)
  // projects Project[] already defined above

  // Relation to SdkConfiguration (a tenant has one SDK configuration)
  // sdkConfig SdkConfiguration? already defined above

  conversations Conversation[] // Added missing relation field
}

model User {
  id            String    @id // From Supabase auth.users.id
  email         String?   @unique // From Supabase auth.users.email
  fullName      String? // Custom field, could be from user_metadata or this table
  roleId        String
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @relation(fields: [roleId], references: [id])
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  conversations Conversation[] // Agent assigned to conversations
  tasksAssigned Task[]         @relation("AssignedTasks")

  @@index([tenantId])
  @@index([roleId])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "Administrator", "Agent Supervisor", "Agent"
  description String?
  permissions RolePermission[]
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "manage_users", "view_all_conversations"
  category    String // e.g., "UserManagement", "Conversations"
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

enum ChannelType {
  WHATSAPP
  MESSENGER
  INSTAGRAM
  WEB_CHAT
  API
  TELEGRAM
}

model Channel {
  id            String        @id @default(cuid())
  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  type          ChannelType
  name          String // User-defined name for this channel instance
  configuration Json? // Store API keys, tokens, webhook URLs, etc.
  isEnabled     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  conversations Conversation[]

  @@index([tenantId])
}

enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
  BOT // Handled by bot
  AGENT // Handled by agent
}

model Conversation {
  id        String             @id @default(cuid())
  tenantId  String
  tenant    Tenant             @relation(fields: [tenantId], references: [id])
  channelId String
  channel   Channel            @relation(fields: [channelId], references: [id])
  contactId String // Identifier for the external contact (e.g., phone number, page-scoped ID)
  status    ConversationStatus @default(OPEN)
  assignedToId String? // User ID of the agent assigned
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  lastMessageAt DateTime       @default(now())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  messages  Message[]
  leadId    String?
  lead      Lead?              @relation(fields: [leadId], references: [id])

  @@index([tenantId])
  @@index([channelId])
  @@index([assignedToId])
  @@index([leadId])
}

enum MessageSenderType {
  USER // End-user/Customer
  AGENT
  BOT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
  CONTACT
  TEMPLATE
  INTERACTIVE_BUTTONS
  INTERACTIVE_LIST
  CAROUSEL
}

model Message {
  id             String            @id @default(cuid())
  conversationId String
  conversation   Conversation      @relation(fields: [conversationId], references: [id])
  senderType     MessageSenderType
  senderId       String? // User ID if agent/bot, contactId if user
  content        Json // Flexible content (text, media URL, structured message)
  type           MessageType       @default(TEXT)
  timestamp      DateTime          @default(now())
  sentAt         DateTime          @default(now())
  deliveredAt    DateTime?
  readAt         DateTime?
  metadata       Json? // For message-specific metadata (e.g., AI suggestions used)

  @@index([conversationId])
}

enum FlowStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Flow {
  id            String     @id @default(cuid())
  tenantId      String
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  name          String
  description   String?
  configuration Json // JSON definition of the flow (nodes, edges, etc.) from ReactFlow
  status        FlowStatus @default(DRAFT)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([tenantId])
}

model Lead {
  id            String         @id @default(cuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  firstName     String?
  lastName      String?
  email         String?
  phone         String?
  company       String?
  status        String? // e.g., "New", "Contacted", "Qualified", "Lost", "Won"
  source        String? // e.g., "Web Chat", "Manual Entry", "Import"
  assignedToId  String? // User ID of the agent assigned
  // assignedTo    User?          @relation("LeadAssignments", fields: [assignedToId], references: [id]) // Needs separate relation name if User has multiple lead relations
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  quotes        Quote[]
  tasks         Task[]
  projects      Project[]

  @@index([tenantId])
  @@index([email])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Product {
  id          String      @id @default(cuid())
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  type        ProductType
  name        String
  description String?
  sku         String?     @unique
  price       Decimal     @db.Decimal(10, 2)
  stock       Int? // Applicable if PRODUCTO
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  quoteItems  QuoteItem[]

  @@index([tenantId])
}

enum QuoteStatus {
  BORRADOR
  ENVIADA
  ACEPTADA
  RECHAZADA
  ANULADA
}

model Quote {
  id           String      @id @default(cuid())
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id])
  leadId       String
  lead         Lead        @relation(fields: [leadId], references: [id])
  quoteNumber  String      @unique // e.g., Q-2024-001
  status       QuoteStatus @default(BORRADOR)
  issueDate    DateTime    @default(now())
  expiryDate   DateTime?
  subtotal     Decimal     @db.Decimal(12, 2)
  discount     Decimal?    @db.Decimal(12, 2)
  tax          Decimal?    @db.Decimal(12, 2)
  total        Decimal     @db.Decimal(12, 2)
  notes        String?
  terms        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        QuoteItem[]

  @@index([tenantId])
  @@index([leadId])
}

model QuoteItem {
  id        String  @id @default(cuid())
  quoteId   String
  quote     Quote   @relation(fields: [quoteId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2) // Price at the time of quote, could differ from current product price
  totalPrice Decimal @db.Decimal(12, 2)
  description String? // Can override product description for this specific quote item
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quoteId])
  @@index([productId])
}

enum TaskStatus {
  PENDIENTE
  EN_PROGRESO
  COMPLETADA
  ARCHIVADA
}

model Task {
  id           String     @id @default(cuid())
  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  title        String
  description  String?
  status       TaskStatus @default(PENDIENTE)
  priority     String? // e.g., "High", "Medium", "Low"
  dueDate      DateTime?
  assignedToId String?
  assignedTo   User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  relatedLeadId String?
  relatedLead  Lead?      @relation(fields: [relatedLeadId], references: [id])
  relatedProjectId String?
  relatedProject Project?   @relation(fields: [relatedProjectId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([tenantId])
  @@index([assignedToId])
  @@index([relatedLeadId])
  @@index([relatedProjectId])
}

enum ProjectStatus {
  PLANIFICACION
  ACTIVO
  COMPLETADO
  EN_ESPERA
  CANCELADO
}

model Project {
  id             String        @id @default(cuid())
  tenantId       String
  tenant         Tenant        @relation(fields: [tenantId], references: [id])
  name           String
  description    String?
  status         ProjectStatus @default(PLANIFICACION)
  startDate      DateTime?
  endDate        DateTime?
  relatedLeadId  String?
  relatedLead    Lead?         @relation(fields: [relatedLeadId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tasks          Task[]

  @@index([tenantId])
  @@index([relatedLeadId])
}

model SdkConfiguration {
  id             String   @id @default(cuid())
  tenantId       String   @unique // Each tenant has one SDK config
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  primaryColor   String?  @default("#29ABE2")
  widgetPosition String?  @default("bottom-right") // "bottom-left"
  showGreeting   Boolean? @default(true)
  welcomeMessage String?  @default("Hi there! 👋 How can we help you today?")
  defaultFlowId  String?  // ID of the Flow to start by default
  proactiveChat  Boolean? @default(false)
  proactiveDelay Int?     @default(10) // seconds
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

    