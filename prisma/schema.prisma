// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models: Tenant and User Management
model Tenant {
  id                String   @id @default(cuid())
  name              String
  subdomain         String   @unique // e.g., "mycompany" for mycompany.example.com
  ownerId             String? @unique // Initially null, set after user confirms
  owner               User?                @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  users               TenantUser[]
  companies           Company[]
  leads               Lead[]
  products            Product[]
  quotes              Quote[]
  tasks               Task[]
  projects            Project[]
  tags                Tag[]
  chatbotFlows        ChatbotFlow[]
  chatbotFlowStates   ChatbotFlowState[]
  apiKey              ApiKey[]


  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
}

model User {
  id            String       @id // Comes from Supabase Auth
  email         String       @unique
  fullName      String?
  avatarUrl     String?
  tenants       TenantUser[] // User can belong to multiple tenants with different roles
  ownedTenant   Tenant?      // If this user is the primary owner of a tenant
  
  // Timestamps from Supabase Auth (if synced)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // For Auth.Admin managed users (if applicable in your Supabase setup)
  // This part is more about how you map Supabase Auth users to your app's User model
  // Supabase handles its own user table; this is your application's representation.
}

model TenantUser {
  tenantId  String
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String // e.g., "admin", "agent", "viewer" (could be an enum Role later)

  assignedLeads     Lead[]     @relation("LeadAssignedTo")
  assignedTasks     Task[]     @relation("TaskAssignedTo")
  projectMembership ProjectTeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tenantId, userId])
}

model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  keyHash     String   @unique // Store a hash of the API key, not the key itself
  prefix      String   // e.g., "sk_live_" first few chars for identification
  name        String
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  permissions String[] // List of permissions granted to this key

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}


// CRM Modules
model Company {
  id                String    @id @default(cuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  email             String?   
  phone             String?
  website           String?
  addressStreet     String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  description       String?   @db.Text
  industry          String?   // e.g., "Technology", "Healthcare"
  annualRevenue     Float?
  numberOfEmployees Int?
  
  leads             Lead[]    // Leads associated with this company
  projects          Project[] @relation("ProjectCompany")


  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@unique([tenantId, email]) 
  @@index([tenantId])
  @@index([name])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED // Converted to Opportunity/Customer
  CLOSED_WON // If opportunity module is separate, this might belong there
  CLOSED_LOST // If opportunity module is separate, this might belong there
  UNQUALIFIED
  ARCHIVED
}

enum LeadSource {
  WhatsApp
  WebChat
  Messenger
  Instagram
  Manual
  Referral
  API
  Other
}

model Lead {
  id                 String     @id @default(cuid())
  tenantId           String
  tenant             Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String // Full name of the lead
  email              String?
  phone              String?
  companyId          String?
  company            Company?   @relation(fields: [companyId], references: [id], onDelete: SetNull)
  source             LeadSource
  status             LeadStatus
  notes              String?    @db.Text
  lastContacted      DateTime?
  assignedToUserId   String?
  assignedTo         TenantUser? @relation("LeadAssignedTo", fields: [assignedToUserId], references: [userId], onDelete: SetNull, onUpdate: NoAction) 

  opportunityValue   Float?
  expectedCloseDate  DateTime?

  tags                      LeadTag[]
  quotes                    Quote[]    @relation("QuoteOpportunity") 
  tasksRelatedToLead        Task[]     @relation("TaskRelatedToLead")
  projectsFromOpportunity   Project[]  @relation("ProjectOpportunity")


  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  @@unique([tenantId, email])
  @@index([tenantId, status])
  @@index([tenantId, assignedToUserId])
}

model Tag {
  id          String @id @default(cuid())
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String 
  color       String? 

  leadTags    LeadTag[]
  taskTags    TaskTag[]
  projectTags ProjectTag[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([tenantId, name])
  @@index([tenantId])
}

model LeadTag {
  leadId   String
  lead     Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId String 
  
  assignedAt DateTime @default(now())

  @@id([leadId, tagId, tenantId])
  @@index([tenantId, leadId])
  @@index([tenantId, tagId])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Product {
  id            String  @id @default(cuid())
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  type          ProductType
  description   String? @db.Text
  price         Float   
  sku           String? 
  category      String? 
  isActive      Boolean @default(true) 

  quoteLineItems QuoteLineItem[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  @@unique([tenantId, sku])
  @@index([tenantId])
  @@index([tenantId, name])
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED
}

model Quote {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber     String   
  opportunityId   String   
  opportunity     Lead     @relation("QuoteOpportunity", fields: [opportunityId], references: [id], onDelete: Cascade)
  dateCreated     DateTime @default(now())
  expiryDate      DateTime?
  status          QuoteStatus
  totalAmount     Float    
  notes           String?  @db.Text

  lineItems       QuoteLineItem[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  @@unique([tenantId, quoteNumber])
  @@index([tenantId])
  @@index([tenantId, opportunityId])
  @@index([tenantId, status])
}

model QuoteLineItem {
  id                 String  @id @default(cuid())
  tenantId           String
  tenant             Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade) 
  quoteId            String
  quote              Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId          String
  product            Product @relation(fields: [productId], references: [id], onDelete:Restrict) 
  
  productName        String  
  productDescription String? 
  quantity           Int
  unitPrice          Float   
  total              Float   

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tenantId, quoteId])
  @@index([tenantId, productId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id                 String        @id @default(cuid())
  tenantId           String
  tenant             Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title              String
  description        String?       @db.Text
  status             TaskStatus    @default(PENDING)
  priority           TaskPriority?
  dueDate            DateTime?
  
  assignedToUserId   String?
  assignedTo         TenantUser?   @relation("TaskAssignedTo", fields: [assignedToUserId], references: [userId], onDelete: SetNull, onUpdate: NoAction)
  
  relatedToLeadId   String?
  relatedToLead     Lead?         @relation("TaskRelatedToLead", fields: [relatedToLeadId], references: [id], onDelete: SetNull)

  relatedToProjectId String?
  relatedToProject   Project?      @relation("TaskRelatedToProject", fields: [relatedToProjectId], references: [id], onDelete: SetNull)

  tags               TaskTag[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?

  @@index([tenantId, status])
  @@index([tenantId, assignedToUserId])
  @@index([tenantId, relatedToLeadId])
  @@index([tenantId, relatedToProjectId])
}

model TaskTag {
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId String

  assignedAt DateTime @default(now())

  @@id([taskId, tagId, tenantId])
  @@index([tenantId, taskId])
  @@index([tenantId, tagId])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

model Project {
  id                String        @id @default(cuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  description       String?       @db.Text
  status            ProjectStatus @default(PLANNING)
  startDate         DateTime?
  endDate           DateTime?     
  budget            Float?
  
  companyId         String?             
  company           Company?            @relation("ProjectCompany", fields: [companyId], references: [id], onDelete: SetNull)
  
  opportunityId     String?             
  opportunity       Lead?        @relation("ProjectOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull) 

  tasks             Task[]        @relation("TaskRelatedToProject")
  teamMembers       ProjectTeamMember[]
  tags              ProjectTag[]

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  @@index([tenantId, status])
  @@index([tenantId, companyId])
  @@index([tenantId, opportunityId])
}

model ProjectTeamMember {
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String     
  member    TenantUser @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction) 
  tenantId  String     

  roleInProject String?  

  assignedAt DateTime @default(now())
  
  @@id([projectId, userId, tenantId])
  @@index([tenantId, projectId])
  @@index([tenantId, userId])
}

model ProjectTag {
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenantId  String

  assignedAt DateTime @default(now())

  @@id([projectId, tagId, tenantId])
  @@index([tenantId, projectId])
  @@index([tenantId, tagId])
}


// Chatbot & Flow Modules
model ChatbotFlow {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?  @db.Text
  definition  Json?    
  triggerType String   
  isActive    Boolean  @default(false)

  states      ChatbotFlowState[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([tenantId])
}

model ChatbotFlowState {
  id        String      @id @default(cuid()) 
  tenantId  String
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  // contactId String      
  // contact   Lead?       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  flowId    String
  flow      ChatbotFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  
  currentNodeId String?   
  stateData   Json?       
  isActive    Boolean     @default(true) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, flowId])
}
