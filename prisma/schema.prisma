
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core Models
model Tenant {
  id            String   @id @default(uuid())
  name          String
  subdomain     String   @unique // e.g., mycompany.example.com
  ownerId       String? // Initially null, set after user confirms
  owner         User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  users         TenantUser[]
  roles         Role[]
  notifications Notification[]
  conversations Conversation[]
  messages      Message[] // For system-wide messages or if messages aren't always tied to a conversation
  leads         Lead[]
  contacts      Contact[]
  companies     Company[]
  opportunities Opportunity[]
  products      Product[]
  quotes        Quote[]
  tasks         Task[]
  projects      Project[]
  chatbotFlows  ChatbotFlow[]
  tags          Tag[]
  leadTags      LeadTag[]
  taskTags      TaskTag[]
  projectTags   ProjectTag[]
  rolePermissions RolePermission[]
  opportunityProducts OpportunityProduct[]
  quoteLineItems QuoteLineItem[]
  projectTeamMembers ProjectTeamMember[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String       @id // Comes from Supabase Auth provider
  email             String       @unique
  tenantUserEntries TenantUser[] // A user can be part of multiple tenants
  ownedTenant       Tenant?      // If this user is an owner of a tenant
  sessions          UserSession[]
  notifications     Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
}

model TenantUser {
  id                String    @id @default(uuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String // References Supabase User ID
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId            String
  role              Role      @relation(fields: [roleId], references: [id])
  fullName          String?
  avatarUrl         String?
  isActive          Boolean   @default(true)
  assignedLeads     Lead[]    @relation("LeadAssignedToUser")
  assignedOpportunities Opportunity[] @relation("OpportunityAssignedToUser")
  createdTasks      Task[]    @relation("TaskCreatedByUser")
  assignedTasks     Task[]    @relation("TaskAssignedToUser")
  projectMemberships ProjectTeamMember[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, userId])
  @@unique([tenantId, email]) // Assuming email is also stored/synced here for tenant-specific uniqueness if needed
  email             String // Make email mandatory and use it for uniqueness with tenantId
}

model Role {
  id              String   @id @default(uuid())
  tenantId        String // Each tenant can define its own custom roles or use system roles with tenantId IS NULL
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String   // e.g., "Administrator", "Agent", "Marketing Manager"
  description     String?
  isSystemRole    Boolean  @default(false) // True for predefined roles like "Owner", "Admin", "Agent"
  users           TenantUser[]
  rolePermissions RolePermission[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, name])
}

model Permission {
  id              String   @id @default(uuid())
  name            String   @unique // e.g., "manage_users", "view_conversations", "manage_billing"
  description     String?
  category        String   // e.g., "User Management", "Conversations", "Billing"
  rolePermissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Permissions are generally global and not soft-deleted, but roles assign them.
}

model RolePermission {
  roleId       String
  permissionId String
  tenantId     String // To scope the assignment to a tenant
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId, tenantId])
}


model Notification {
  id          String    @id @default(uuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String // Can be a specific user or a system-wide notification (nullable then?)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String    // e.g., "new_lead", "task_due", "message_received"
  title       String
  message     String
  link        String?   // Link to the relevant part of the app
  isRead      Boolean   @default(false)
  readAt      DateTime?
  emailed     Boolean   @default(false) // If a corresponding email was sent
  emailSentAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Communication Module
model Conversation {
  id                String    @id @default(uuid())
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channelType       String    // e.g., "whatsapp", "messenger", "web"
  channelIdentifier String    // e.g., WhatsApp number, Page ID, session ID
  contactId         String?   // Link to a CRM Contact if identified
  contact           Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  leadId            String?   // Link to a CRM Lead if identified
  lead              Lead?     @relation(fields: [leadId], references: [id], onDelete: SetNull)
  lastMessageAt     DateTime  @default(now())
  status            String    // e.g., "open", "assigned", "closed", "archived"
  assignedToUserId  String?
  // assignedTo TenantUser? @relation(fields: [assignedToUserId], references: [id]) // Needs specific relation name
  unreadCount       Int       @default(0)
  messages          Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, lastMessageAt])
  @@index([tenantId, status])
}

model Message {
  id             String       @id @default(uuid())
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderType     String       // "user", "agent", "system", "bot"
  senderId       String?      // UserId for agent, ContactId for user (if known)
  content        Json         // Flexible for text, images, buttons, carousels, etc.
  // Example structure for content:
  // { type: "text", text: "Hello" }
  // { type: "image", url: "...", caption: "..." }
  // { type: "buttons", text: "Choose:", options: [{label: "A", payload: "a"}] }
  timestamp      DateTime     @default(now())
  isReadByAgent  Boolean      @default(false) // If agent has seen user message
  status         String?      // e.g., "sent", "delivered", "read_by_user", "failed" (for outgoing)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([conversationId, timestamp])
}

// CRM Module
model Lead {
  id               String         @id @default(uuid())
  tenantId         String
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name             String
  email            String?
  phone            String?
  source           LeadSource     @default(Manual)
  status           LeadStatus     @default(NEW)
  companyId        String?
  company          Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)
  assignedToUserId String?
  assignedTo       TenantUser?    @relation("LeadAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  lastContacted    DateTime?
  notes            String?
  tags             LeadTag[]
  convertedToContactId String?    @unique // If converted to a Contact
  convertedToOpportunityId String? @unique // If converted to an Opportunity
  conversations    Conversation[] // A lead might have multiple conversations over time

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, email])
  @@index([tenantId, status])
  @@index([tenantId, source])
}

enum LeadSource {
  WhatsApp
  WebChat
  Messenger
  Instagram
  Manual
  Referral
  API
  Other
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED // General converted status
  CLOSED_WON // Specifically if it became a won opportunity
  CLOSED_LOST
  UNQUALIFIED
  ARCHIVED
}

model Tag {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String        // Tag name, e.g., "VIP", "Complaint", "Feature Request"
  color       String?       // Hex color for the tag
  leadTags    LeadTag[]
  taskTags    TaskTag[]
  projectTags ProjectTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, name])
}

model LeadTag {
  leadId   String
  tagId    String
  tenantId String
  lead     Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: NoAction, map: "leadtag_tenant_fk") // Explicit FK name

  assignedAt DateTime @default(now())

  @@id([leadId, tagId, tenantId])
}

model Contact {
  id            String         @id @default(uuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String?
  email         String?
  phone         String?
  companyId     String?
  company       Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)
  role          String?        // Job title or role
  conversations Conversation[]
  opportunities Opportunity[]  // A contact can be part of multiple opportunities
  quotes        Quote[]        // Quotes issued to this contact
  tasks         Task[]         // Tasks related to this contact

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, email])
}

model Company {
  id                String        @id @default(uuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  email             String?       @unique // Email should ideally be unique globally or per tenant
  phone             String?
  website           String?
  addressStreet     String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  description       String?
  industry          String?       // e.g., "Technology", "Healthcare"
  annualRevenue     Float?
  numberOfEmployees Int?
  leads             Lead[]
  contacts          Contact[]
  opportunities     Opportunity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, name])
}

model Opportunity {
  id                  String    @id @default(uuid())
  tenantId            String
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name                String    // e.g., "Website Redesign Project for Acme Corp"
  companyId           String?
  company             Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  contactId           String?   // Primary contact for this opportunity
  contact             Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  amount              Float     // Estimated or actual value
  stageId             String
  stage               OpportunityStage @relation(fields: [stageId], references: [id])
  probability         Float?    // Likelihood of closing (0.0 to 1.0)
  expectedCloseDate   DateTime?
  actualCloseDate     DateTime?
  assignedToUserId    String?
  assignedTo          TenantUser? @relation("OpportunityAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  source              String?   // e.g., "Referral", "Website", "Cold Call"
  notes               String?
  products            OpportunityProduct[]
  quotes              Quote[]   // Quotes related to this opportunity
  tasks               Task[]    // Tasks for this opportunity

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, stageId])
}

model OpportunityStage {
  id            String        @id @default(uuid())
  tenantId      String?       // Nullable for system-default stages, TenantId for custom stages
  // tenant     Tenant?    @relation(fields: [tenantId], references: [id]) // If stages can be tenant-specific
  name          String        // e.g., "Prospecting", "Qualification", "Proposal", "Negotiation", "Closed Won", "Closed Lost"
  order         Int           // To define the order in the pipeline
  isSystemStage Boolean       @default(false)
  opportunities Opportunity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name]) // A stage name should be unique within a tenant (or globally if tenantId is null)
  @@index([order])
}

model OpportunityProduct {
  opportunityId String
  productId     String
  tenantId      String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent product deletion if in opp
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quantity      Int
  unitPrice     Float       // Price at the time of adding to opportunity
  totalPrice    Float

  addedAt DateTime @default(now())

  @@id([opportunityId, productId, tenantId])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Product {
  id                  String   @id @default(uuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  type                ProductType
  price               Float
  sku                 String?  // Stock Keeping Unit
  category            String?  // e.g., "Software", "Consulting", "Hardware"
  isActive            Boolean  @default(true) // For toggling availability without deleting
  opportunityProducts OpportunityProduct[]
  quoteLineItems      QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, sku])
  @@index([tenantId, name])
}

model Quote {
  id              String          @id @default(uuid())
  tenantId        String
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber     String          @unique // e.g., QT-2024-001
  opportunityId   String
  opportunity     Opportunity     @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  contactId       String?         // Contact this quote is addressed to
  contact         Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  status          QuoteStatus     @default(DRAFT)
  issueDate       DateTime        @default(now())
  expiryDate      DateTime?
  totalAmount     Float
  notes           String?
  terms           String?
  lineItems       QuoteLineItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, status])
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED
}

model QuoteLineItem {
  id        String  @id @default(uuid())
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteId   String
  quote     Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent product deletion if in quote
  description String? // Can be overridden from product description
  quantity  Int
  unitPrice Float   // Price at the time of quoting
  totalPrice Float  // quantity * unitPrice

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // No soft delete for line items, they live and die with the quote.
}

model Task {
  id                String        @id @default(uuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title             String
  description       String?
  status            TaskStatus    @default(PENDING)
  priority          TaskPriority?
  dueDate           DateTime?
  completedAt       DateTime?
  createdById       String?
  createdBy         TenantUser?   @relation("TaskCreatedByUser", fields: [createdById], references: [id], onDelete: SetNull)
  assignedToUserId  String?
  assignedTo        TenantUser?   @relation("TaskAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  relatedToLeadId   String?
  relatedToLead     Lead?         @relation(fields: [relatedToLeadId], references: [id], onDelete: SetNull)
  relatedToContactId String?
  relatedToContact  Contact?      @relation(fields: [relatedToContactId], references: [id], onDelete: SetNull)
  relatedToOpportunityId String?
  relatedToOpportunity Opportunity? @relation(fields: [relatedToOpportunityId], references: [id], onDelete: SetNull)
  relatedToProjectId String?
  relatedToProject  Project?      @relation(fields: [relatedToProjectId], references: [id], onDelete: SetNull)
  tags              TaskTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, status])
  @@index([tenantId, dueDate])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED // Different from soft delete, user explicitly archives
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model TaskTag {
  taskId   String
  tagId    String
  tenantId String
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([taskId, tagId, tenantId])
}

model Project {
  id                String              @id @default(uuid())
  tenantId          String
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  status            ProjectStatus       @default(PLANNING)
  startDate         DateTime?
  endDate           DateTime? // Target end date
  actualEndDate     DateTime? // Actual completion date
  budget            Float?
  companyId         String?             // Client company
  company           Company?            @relation(fields: [companyId], references: [id], onDelete: SetNull)
  opportunityId     String?             // Opportunity this project originated from
  opportunity       Opportunity?        @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  tasks             Task[]
  teamMembers       ProjectTeamMember[]
  tags              ProjectTag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, status])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

model ProjectTeamMember {
  projectId String
  userId    String // TenantUser ID
  tenantId  String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      TenantUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleInProject String?  // e.g., "Project Manager", "Developer"

  assignedAt DateTime @default(now())

  @@id([projectId, userId, tenantId])
}

model ProjectTag {
  projectId String
  tagId     String
  tenantId  String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([projectId, tagId, tenantId])
}


// Flow Builder Module
model ChatbotFlow {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  definition  Json          // JSON definition of the flow (nodes, edges, etc.)
  status      String        // "draft", "published", "archived"
  triggerType String?       // "keyword", "default_reply", "api"
  triggerConfig Json?       // Configuration for the trigger
  version     Int           @default(1)
  chatMessages ChatMessage[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId, name])
}

// Analytics Module (Placeholder for now - can be expanded)
// Example: Message Log for SDK Chat (might be different from agent Message model)
model ChatMessage {
  id            String      @id @default(uuid())
  tenantId      String
  // tenant     Tenant   @relation(fields: [tenantId], references: [id]) // Removed direct relation to Tenant to simplify, can be added
  flowId        String?     // If message originated from a flow
  flow          ChatbotFlow? @relation(fields: [flowId], references: [id], onDelete: SetNull)
  sessionId     String      // Unique ID for the chat session on the SDK
  visitorId     String      // Unique ID for the website visitor
  message       String      // The content of the message
  sender        String      // "visitor" or "bot"
  timestamp     DateTime    @default(now())
  metadata      Json?       // Any extra metadata (e.g., browser, OS, page URL)
  isHandled     Boolean     @default(false) // If an agent took over or an action was completed
  deletedAt DateTime?

  createdAt DateTime @default(now())

  @@index([tenantId, sessionId])
  @@index([timestamp])
}

    