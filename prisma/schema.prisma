// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
// Tenant and User Management
// ==================================

model Tenant {
  id           String        @id @default(cuid())
  name         String
  subdomain    String        @unique // e.g., mycompany.conectahub.app
  ownerId      String?       // ID del usuario de Supabase que es el propietario original
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  settings     Json?         // Configuración específica del tenant (colores, logo, etc.)
  subscription Json?         // Detalles de la suscripción (Stripe ID, plan, estado)

  users                 TenantUser[]
  roles                 Role[]
  permissions           Permission[]   @relation("TenantPermissions")
  notifications         Notification[] @relation("NotificationToTenant")
  conversations         Conversation[]
  messages              Message[]
  leads                 Lead[]
  companies             Company[]
  contacts              Contact[]
  opportunities         Opportunity[]
  products              Product[]
  quotes                Quote[]
  tasks                 Task[]
  projects              Project[]
  tags                  Tag[]
  chatbotFlows          ChatbotFlow[]
  chatMessages          ChatMessage[] // Mensajes del SDK
  // Otras relaciones globales del tenant...
}

model TenantUser {
  id        String   @id @default(cuid()) // Internal ID for TenantUser relation
  userId    String   // Supabase Auth User ID (UUID)
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleIds   String[] // Array of Role IDs within this tenant
  roles     Role[]   @relation(fields: [roleIds], references: [id])
  fullName  String?
  email     String?  @unique // Puede ser útil tener el email aquí para búsquedas rápidas
  avatarUrl String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  assignedConversations Conversation[] @relation("AssignedConversationToUser")
  createdNotifications  Notification[] @relation("NotificationFromUser")
  targetNotifications   Notification[] @relation("NotificationToUser")
  createdTasks          Task[]         @relation("TaskCreator")
  assignedTasks         Task[]         @relation("TaskAssignee")
  createdProjects       Project[]      @relation("ProjectCreator")
  projectMemberships    ProjectTeamMember[]

  @@unique([userId, tenantId])
  @@index([tenantId])
}


model Role {
  id          String       @id @default(cuid())
  name        String       // e.g., "Administrator", "Agent", "Sales Manager"
  description String?
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]
  isSystemRole Boolean     @default(false) // True for predefined roles, false for custom roles
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  users TenantUser[] @relation(fields: [tenantUserIds], references: [id])
  tenantUserIds String[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "manage", "create", "read", "update", "delete"
  resource    String   // e.g., "users", "conversations", "settings.billing" (puede ser jerárquico)
  description String?
  isSystemPermission Boolean @default(true) // Para diferenciar permisos base de extensiones futuras
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles    Role[]   @relation(fields: [roleIds], references: [id])
  roleIds  String[]

  tenantId String? // Si los permisos pueden ser específicos del tenant o globales (null para globales)
  tenant   Tenant?  @relation("TenantPermissions", fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([action, resource, tenantId]) // Un permiso es único por acción, recurso y (opcionalmente) tenant
}


// Supabase Auth User Sync (opcional, si necesitas más detalles que los que ya tienes en TenantUser)
// model UserProfile {
//   id        String    @id // Supabase Auth User ID (UUID)
//   email     String    @unique
//   fullName  String?
//   avatarUrl String?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// Needed for Supabase Auth Hook to work
// Note: table name must be "user_sessions"
model UserSession {
  id           String   @id @default(cuid())
  userId       String // Supabase Auth User ID
  expiresAt    DateTime
  lastActiveAt DateTime @default(now())
  // userAgent    String?
  // ipAddress    String?

  // tenantUser   TenantUser @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade) // TODO: Revisar si es necesaria esta relación o si causa problemas con el hook
  @@index([userId])
  @@map("user_sessions")
}


model Notification {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation("NotificationToTenant", fields: [tenantId], references: [id], onDelete: Cascade)
  type        String   // e.g., "new_lead", "task_assigned", "mention"
  message     String
  link        String?  // Link to relevant page (e.g., /crm/leads/lead-id)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Quién generó la notificación (opcional, puede ser el sistema)
  fromUserId  String?
  fromUser    TenantUser? @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)

  // A quién va dirigida la notificación (opcional, puede ser para un rol o "todos")
  targetUserId String?
  targetUser   TenantUser? @relation("NotificationToUser", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetRoleId String? // Para notificaciones a roles específicos
  // targetRole   Role?       @relation(fields: [targetRoleId], references: [id], onDelete: SetNull) // Prisma no soporta relaciones opcionales a campos de array aún

  @@index([tenantId, targetUserId, isRead])
}


// ==================================
// Conversation Core
// ==================================
enum ChannelType {
  WHATSAPP
  MESSENGER
  INSTAGRAM
  WEBCHAT // Renombrado desde WEB_CHAT
  TELEGRAM
  API
  MANUAL // Para leads/conversaciones creadas manualmente
}

enum ConversationStatus {
  ACTIVE // Reemplaza PENDING y AGENT, BOT
  ASSIGNED // Nueva, para cuando está asignada pero no necesariamente activa en este instante
  CLOSED // Reemplaza RESOLVED
  ARCHIVED // Nueva
  // PENDING // Eliminado
  // RESOLVED // Eliminado
  // BOT // Eliminado
  // AGENT // Eliminado
}

model Conversation {
  id        String   @id @default(cuid())
  channel   ChannelType
  channelConversationId String? @unique // ID original de la conversación en el canal externo
  status    ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime @default(now())
  summary     String?  // Resumen generado por IA
  tags        Json?    // Podría ser un array de strings o IDs de un modelo Tag
  customFields Json?   // Campos personalizados para esta conversación
  
  assignedToUserId   String?
  assignedTo         TenantUser?      @relation("AssignedConversationToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  tenantId           String
  tenant             Tenant     @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  messages Message[]
  leadId   String?   // Enlace a un Lead si esta conversación generó o está ligada a uno
  lead     Lead?     @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@index([tenantId, status])
  @@index([tenantId, assignedToUserId])
  @@index([tenantId, lastMessageAt])
}

enum MessageSenderType {
  USER
  AGENT
  BOT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  TEMPLATE // Plantillas de WhatsApp, etc.
  INTERACTIVE // Para botones, listas, etc.
  // INTERACTIVE_BUTTONS // Eliminado
  // INTERACTIVE_LIST // Eliminado
  // CAROUSEEL // Eliminado
}

model Message {
  id          String   @id @default(cuid())
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderType  MessageSenderType
  senderId    String? // ID del usuario/agente/bot que envió, o 'system'
  content     String   @db.Text // Contenido del mensaje (texto, URL de imagen, JSON de interactivo)
  type        MessageType @default(TEXT)
  timestamp   DateTime @default(now())
  metadata    Json?    // Para IDs de mensajes externos, estado de entrega, etc.
  
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?

  @@index([conversationId, timestamp])
}


// ==================================
// CRM Entities
// ==================================
enum LeadSource {
  WHATSAPP
  MESSENGER
  INSTAGRAM
  WEBCHAT // Anteriormente WEB_CHAT
  TELEGRAM
  API
  MANUAL
  REFERRAL // Nueva
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT // Anteriormente PROPOSAL
  NEGOTIATION
  CONVERTED // Anteriormente CONVERTED_TO_OPPORTUNITY
  CLOSED_WON
  CLOSED_LOST
  UNQUALIFIED
}

model Lead {
  id              String      @id @default(cuid())
  tenantId        String
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String      // Nombre completo del lead
  email           String?     @unique
  phone           String?
  companyName     String?     // Nombre de la empresa del lead
  status          LeadStatus  @default(NEW)
  source          LeadSource  @default(MANUAL)
  value           Float?      // Valor estimado del lead
  lastContactedAt DateTime?
  notes           String?     @db.Text
  customFields    Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?

  assignedToUserId String?    // Agente asignado
  // assignedTo    TenantUser? @relation("LeadAssignee", fields: [assignedToUserId], references: [id], onDelete: SetNull) // Necesita relación en TenantUser
  
  companyId       String?     // FK a la tabla Company
  company         Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)

  conversations   Conversation[] // Conversaciones asociadas a este lead
  opportunities   Opportunity[]  // Oportunidades originadas de este lead
  tasks           Task[]         // Tareas relacionadas con este lead
  tags            LeadTag[]      // Tags asociados a este lead

  @@index([tenantId, status])
  @@index([tenantId, email])
  @@index([tenantId, assignedToUserId])
}

model LeadTag {
  leadId    String
  tagId     String
  assignedAt DateTime @default(now())
  // assignedBy String // Podría ser el ID del usuario que asignó el tag

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([leadId, tagId])
  @@index([tagId])
}

model Tag {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String   // Nombre del tag (e.g., "VIP", "Interesado en Producto X")
  color     String?  // Color para el tag (hex)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  leadTags    LeadTag[]
  taskTags    TaskTag[]
  projectTags ProjectTag[]

  @@unique([tenantId, name])
}


model Company {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade) // Relación con Tenant
  name          String
  email         String?  @unique
  phone         String?
  website       String?
  addressStreet String?
  addressCity   String?
  addressState  String?
  addressPostalCode String?
  addressCountry String?
  description   String?  @db.Text
  industry      String?  // Sector de la empresa
  annualRevenue Float?
  numberOfEmployees Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime? // Para borrado seguro

  leads       Lead[]      // Leads asociados a esta empresa
  contacts    Contact[]   // Contactos asociados a esta empresa
  opportunities Opportunity[] // Oportunidades asociadas a esta empresa

  @@index([tenantId, name])
}

model Contact {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String?
  email         String?  @unique
  phone         String?
  mobilePhone   String?
  title         String?  // Cargo del contacto
  department    String?
  linkedinUrl   String?
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  companyId     String?
  company       Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // opportunities Opportunity[] @relation("ContactOpportunities") // Contactos clave en oportunidades

  @@index([tenantId, email])
  @@index([tenantId, companyId])
}

enum OpportunityStatus {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  ON_HOLD
}

model Opportunity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String   // Nombre de la oportunidad (e.g., "Contrato Web para Acme Corp")
  amount      Float?   // Valor estimado de la oportunidad
  status      OpportunityStatus @default(PROSPECTING)
  closeDate   DateTime? // Fecha estimada de cierre
  probability Float?   // Probabilidad de cierre (0.0 a 1.0)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  leadId      String?  // Lead que originó esta oportunidad
  lead        Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)
  companyId   String?  // Empresa asociada a esta oportunidad
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  // primaryContactId String? // Contacto principal para esta oportunidad
  // primaryContact   Contact? @relation("PrimaryContactForOpportunity", fields: [primaryContactId], references: [id], onDelete: SetNull)
  
  // stageId String? // Etapa actual de la oportunidad
  // stage   OpportunityStage? @relation(fields: [stageId], references: [id], onDelete: SetNull)
  
  products    OpportunityProduct[] // Productos/servicios en esta oportunidad
  quotes      Quote[]              // Cotizaciones asociadas
  tasks       Task[]               // Tareas relacionadas
  projects    Project[]            // Proyectos originados de esta oportunidad

  @@index([tenantId, status])
  @@index([tenantId, leadId])
  @@index([tenantId, companyId])
}

// Tabla para stages/etapas de un pipeline de oportunidad (ej. HubSpot CRM)
// model OpportunityStage {
//   id          String   @id @default(cuid())
//   tenantId    String
//   tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   name        String   // "Cita Programada", "Calificado para Comprar", "Presentación Programada"
//   probability Float    // Probabilidad de cierre asociada a esta etapa
//   order       Int      // Orden de la etapa en el pipeline
//   isClosedWon Boolean  @default(false)
//   isClosedLost Boolean @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   opportunities Opportunity[]

//   @@unique([tenantId, name])
//   @@index([tenantId, order])
// }

model OpportunityProduct {
  opportunityId String
  productId     String
  quantity      Int
  unitPrice     Float    // Precio al momento de añadirlo a la oportunidad
  discount      Float?   @default(0)
  totalPrice    Float    // quantity * unitPrice * (1 - discount)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete:Restrict) // Evitar borrar producto si está en una oportunidad

  @@id([opportunityId, productId])
}

enum ProductType {
  PRODUCTO
  SERVICIO
}

model Product {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  type          ProductType   @default(PRODUCTO) // PRODUCTO, SERVICIO
  description   String?  @db.Text
  sku           String?  @unique // Stock Keeping Unit, para productos físicos
  price         Float    // Precio unitario
  cost          Float?   // Costo unitario (para calcular márgenes)
  category      String?
  isActive      Boolean  @default(true)
  customFields  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  opportunityProducts OpportunityProduct[]
  quoteLineItems      QuoteLineItem[]

  @@index([tenantId, name])
  @@index([tenantId, sku])
}

enum QuoteStatus {
  DRAFT // Borrador
  SENT // Enviada
  ACCEPTED // Aceptada
  REJECTED // Rechazada
  CANCELED // Anulada por el emisor
  EXPIRED // Expirada
}

model Quote {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber   String   @unique // Número de cotización (e.g., QT-2024-001)
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  dateCreated   DateTime @default(now())
  expiryDate    DateTime?
  status        QuoteStatus @default(DRAFT)
  subtotal      Float
  discountAmount Float?   @default(0)
  taxAmount     Float?   @default(0)
  totalAmount   Float
  notes         String?  @db.Text
  terms         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  lineItems     QuoteLineItem[]

  @@index([tenantId, status])
  @@index([tenantId, opportunityId])
}

model QuoteLineItem {
  id            String   @id @default(cuid())
  quoteId       String
  quote         Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Restrict) // Evitar borrar producto si está en una cotización
  productName   String   // Nombre del producto al momento de la cotización (puede cambiar)
  description   String?  // Descripción del producto/servicio en esta línea
  quantity      Float
  unitPrice     Float    // Precio unitario al momento de la cotización
  discount      Float?   @default(0) // Descuento para esta línea (porcentaje o monto)
  total         Float    // quantity * unitPrice * (1 - discount)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // No necesita deletedAt, se gestiona por la Quote padre
  
  @@index([quoteId])
  @@index([productId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS // EN_PROGRESO
  COMPLETED // COMPLETADA
  ARCHIVED // ARCHIVADA
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model Task {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title         String
  description   String?  @db.Text
  status        TaskStatus @default(PENDING)
  priority      TaskPriority? @default(MEDIUM)
  dueDate       DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  createdById    String? // Usuario que creó la tarea
  createdBy      TenantUser? @relation("TaskCreator", fields: [createdById], references: [id], onDelete: SetNull)
  assignedToId  String? // Usuario asignado a la tarea
  assignedTo    TenantUser? @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  leadId        String?
  lead          Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  tags          TaskTag[]

  @@index([tenantId, status, priority])
  @@index([tenantId, assignedToId, dueDate])
}

model TaskTag {
  taskId    String
  tagId     String
  assignedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([tagId])
}

enum ProjectStatus {
  PLANNING // PLANIFICACION
  ACTIVE // ACTIVO
  COMPLETED // COMPLETADO
  ON_HOLD // EN_ESPERA
  CANCELED // CANCELADO
}

model Project {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  description   String?  @db.Text
  status        ProjectStatus @default(PLANNING)
  startDate     DateTime?
  endDate       DateTime? // Fecha de finalización real
  deadline      DateTime? // Fecha límite prevista
  budget        Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  createdById   String?
  createdBy     TenantUser? @relation("ProjectCreator", fields: [createdById], references: [id], onDelete: SetNull)
  
  opportunityId String? @unique // Oportunidad que originó este proyecto (si aplica)
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  
  companyId     String?   // Empresa cliente para este proyecto
  // company    Company? @relation(fields: [companyId], references: [id], onDelete: SetNull) // Necesita relación en Company

  tasks         Task[]
  teamMembers   ProjectTeamMember[]
  tags          ProjectTag[]

  @@index([tenantId, status])
  @@index([tenantId, createdById])
}

model ProjectTag {
  projectId String
  tagId     String
  assignedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
  @@index([tagId])
}

model ProjectTeamMember {
  projectId String
  userId    String // TenantUser ID
  roleInProject String? // e.g., "Project Manager", "Developer"
  assignedAt DateTime @default(now())

  project Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    TenantUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([userId])
}


// ==================================
// Chatbot Flow & Analytics
// ==================================
model ChatbotFlow {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  flowConfiguration Json   // Definición del flujo en formato JSON (nodos, transiciones)
  status        String   // e.g., "DRAFT", "PUBLISHED", "ARCHIVED"
  version       Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  // analytics     FlowAnalytics[]

  @@index([tenantId, status])
}

// model FlowAnalytics {
//   id                String   @id @default(cuid())
//   flowId            String
//   flow              ChatbotFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
//   tenantId          String
//   // tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade) // Ya relacionado a través de ChatbotFlow
//   eventDate         DateTime @default(now())
//   eventType         String   // e.g., "flow_started", "node_entered", "flow_completed", "flow_abandoned"
//   nodeId            String?  // ID del nodo si el evento es específico de un nodo
//   sessionId         String   // Identificador de la sesión de la conversación
//   metadata          Json?    // Datos adicionales del evento

//   @@index([flowId, eventDate])
//   @@index([tenantId, eventType])
// }


// ==================================
// Website Chat SDK Specific Models
// ==================================

// Si los mensajes del SDK se almacenan de forma diferente o tienen campos adicionales
model ChatMessage {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessionId String   // Para agrupar mensajes de una misma sesión de chat en el widget
  visitorId String?  // Identificador del visitante (puede ser anónimo o enlazado a un Lead/Contact)
  sender    String   // "user" o "bot"
  message   String   @db.Text
  type      String   // "text", "image", "button_click"
  timestamp DateTime @default(now())
  metadata  Json?    // Para IDs de mensajes externos, etc.
  deletedAt DateTime?

  @@index([tenantId, sessionId, timestamp])
  @@index([tenantId, visitorId])
}
