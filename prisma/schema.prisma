// datasource db defines the database connection details.
datasource db {
  provider     = "postgresql" // Specifies the database provider (PostgreSQL).
  url          = env("DATABASE_URL") // The database connection URL, fetched from environment variables.
  relationMode = "prisma" // Uses Prisma's relation management.
}

// generator client configures the Prisma Client generation.
generator client {
  provider = "prisma-client-js" // Specifies that Prisma Client for JavaScript should be generated.
}

// --- Authentication & User Management ---
model User {
  id                 String       @id @default(uuid()) // Primary key, UUID.
  email              String       @unique // User's email, must be unique.
  hashedPassword     String? // User's hashed password, optional if using OAuth.
  emailVerified      DateTime? // Timestamp when email was verified.
  createdAt          DateTime     @default(now()) // Timestamp of user creation.
  updatedAt          DateTime     @updatedAt // Timestamp of last update.
  tenants            TenantUser[] @relation("UserToTenantUser") // Junction table for many-to-many with Tenant.
  lastSignInAt     DateTime? // Timestamp of the last sign-in.
  user_metadata      Json? // Holds additional user metadata such as full_name, avatar_url.
  identities         Json? // Stores information about linked OAuth identities.
}

model Tenant {
  id            String         @id @default(uuid()) // Primary key, UUID.
  name          String // Name of the tenant (organization).
  subdomain     String         @unique // Unique subdomain for the tenant.
  ownerId       String? // ID of the user who owns the tenant (can be null if system-managed or pending).
  createdAt     DateTime       @default(now()) // Timestamp of tenant creation.
  updatedAt     DateTime       @updatedAt // Timestamp of last update.
  users         TenantUser[]   @relation("TenantToTenantUser") // Junction table for many-to-many with User.
  settings      TenantSettings? // One-to-one relationship with TenantSettings.
  roles         Role[] // Roles defined within this tenant.
  leads         Lead[] // Leads belonging to this tenant.
  opportunities Opportunity[] // Opportunities belonging to this tenant.
  products      Product[] // Products/services offered by this tenant.
  quotes        Quote[] // Quotes generated by this tenant.
  projects      Project[] // Projects managed by this tenant.
  tasks         Task[] // Tasks within this tenant.
  conversations Conversation[]
  messages      Message[]
  notifications Notification[] // Notifications belonging to this tenant
}

model TenantUser {
  id             String        @id @default(uuid()) // Primary key for the junction table entry.
  tenantId       String // Foreign key to Tenant.
  tenant         Tenant        @relation("TenantToTenantUser", fields: [tenantId], references: [id], onDelete: Cascade)
  userId         String // Foreign key to User.
  user           User          @relation("UserToTenantUser", fields: [userId], references: [id], onDelete: Cascade)
  roleId         String? // Foreign key to Role, optional.
  role           Role?         @relation(fields: [roleId], references: [id], onDelete: SetNull) // Role assigned to the user within this tenant.
  joinedAt       DateTime      @default(now()) // Timestamp when user joined the tenant.
  assignedLeads  Lead[]        @relation("LeadAssignedToUser") // Leads assigned to this user.
  assignedTasks  Task[]        @relation("TaskAssignedToUser") // Tasks assigned to this user.
  projectMembers ProjectTeamMember[] @relation("ProjectMemberToUser")
  notifications  Notification[] @relation("NotificationToUser") // Notificaciones para este usuario
  assignedConversations Conversation[] @relation("AssignedConversationToUser")

  @@unique([tenantId, userId]) // Ensures a user can only be linked to a tenant once.
  @@index([userId])
  @@index([tenantId])
}

model TenantSettings {
  id             String   @id @default(uuid())
  tenantId       String   @unique // Foreign key to Tenant.
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  logoUrl        String? // URL for the tenant's logo.
  primaryColor   String? // Primary brand color.
  secondaryColor String? // Secondary brand color.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  tenantId    String // Foreign key to Tenant, indicating which tenant this role belongs to.
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String // Name of the role (e.g., "Administrator", "Agent").
  description String? // Description of the role.
  users       TenantUser[] // Users assigned to this role.
  permissions Permission[] @relation("RoleToPermission") // Permissions associated with this role.
  isSystemRole Boolean      @default(false) // True if this is a predefined system role (non-deletable, non-editable name by tenant admins).

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name]) // Role names must be unique within a tenant.
}

model Permission {
  id          String   @id @default(uuid())
  action      String // e.g., "create", "read", "update", "delete", "assign"
  resource    String // e.g., "lead", "conversation", "flow", "tenant_settings"
  description String? // What this permission allows
  roles       Role[]   @relation("RoleToPermission") // Roles that have this permission.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, resource]) // Ensures permission definitions are unique.
}

// --- Communication & Messaging ---
enum ChannelType {
  WHATSAPP
  MESSENGER
  INSTAGRAM
  WEBCHAT // Was WEB_CHAT
  TELEGRAM
  API
}

model ChannelConnection {
  id            String      @id @default(uuid())
  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  instanceName  String // User-defined name for this connection instance (e.g., "Sales WhatsApp Line")
  channelType   ChannelType
  status        String // e.g., "connected", "disconnected", "needs_attention", "pending_webhook"
  webhookUrl    String? // URL to send incoming messages/events
  verifyToken   String? // Token for webhook verification
  details       Json? // Specific config details like WhatsApp Number ID, Page ID, API keys, etc.
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  conversations Conversation[]

  @@index([tenantId])
}

enum ConversationStatus {
  ACTIVE // Was PENDING
  ASSIGNED // Was AGENT
  CLOSED // Was RESOLVED
  ARCHIVED // New status
  // BOT (Removed)
}

model Conversation {
  id                 String             @id @default(uuid())
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  channelConnectionId String?
  channelConnection  ChannelConnection? @relation(fields: [channelConnectionId], references: [id], onDelete: SetNull)
  externalContactId  String? // ID of the contact on the external platform (e.g., WhatsApp ID, Messenger PSID)
  userName           String? // Name of the user from the channel
  userAvatarUrl      String? // Avatar URL from the channel
  status             ConversationStatus @default(ACTIVE)
  lastMessageSnippet String?
  lastMessageAt      DateTime?
  assignedToUserId   String?
  assignedTo         TenantUser?      @relation("AssignedConversationToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  unreadCount        Int                @default(0)
  tags               ConversationTag[]
  messages           Message[]
  leadId             String?            @unique // Optionally linked to a CRM Lead
  lead               Lead?              @relation(fields: [leadId], references: [id], onDelete: SetNull)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([tenantId])
  @@index([assignedToUserId])
  @@index([status])
}

model ConversationTag {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  tag            String
  assignedAt     DateTime     @default(now())
  assignedBy     String? // TenantUserId who assigned the tag

  @@unique([conversationId, tag])
  @@index([tag])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  PRODUCT_SINGLE
  PRODUCT_LIST
  INTERACTIVE_BUTTON_REPLY // Was INTERACTIVE_BUTTONS
  INTERACTIVE_LIST_REPLY // Was INTERACTIVE_LIST
  INTERACTIVE_CAROUSEL // Was CAROUSEL
  TEMPLATE
  SYSTEM // For system messages like "Agent joined chat"
  UNSUPPORTED
}

enum MessageSender {
  USER
  AGENT
  BOT
  SYSTEM
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderType     MessageSender
  senderId       String? // For AGENT type, this would be TenantUser ID. For USER, could be externalContactId.
  content        String? // Text content
  type           MessageType
  mediaUrl       String? // URL for image, video, audio, file
  mediaMimeType  String?
  interactivePayload Json?     // For interactive messages (buttons, lists)
  timestamp      DateTime      @default(now())
  isReadByAgent  Boolean       @default(false)
  metadata       Json? // Additional message metadata (e.g., WhatsApp message ID, reactions)
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Evitar ciclos de borrado directo
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([conversationId])
  @@index([timestamp])
}

// --- Flow Builder ---
model Flow {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  description String?
  status      String // e.g., "DRAFT", "PUBLISHED", "ARCHIVED"
  nodes       Json // JSON representation of ReactFlow nodes
  edges       Json // JSON representation of ReactFlow edges
  triggerType String? // e.g., "keyword", "initial_message", "api"
  triggerConfig Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
}

// --- CRM Entities ---
model Company {
  id                String        @id @default(uuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  email             String?       @unique // Optional, but unique if provided
  phone             String?
  website           String?
  addressStreet     String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  description       String?
  industry          String?
  annualRevenue     Float?
  numberOfEmployees Int?
  deletedAt         DateTime? // For soft delete

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  leads         Lead[] // A company can have multiple leads
  opportunities Opportunity[] // A company can have multiple opportunities

  @@index([tenantId])
  @@index([name])
  @@index([deletedAt])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED // Renamed from CONVERTED_TO_OPPORTUNITY
  CLOSED_WON
  CLOSED_LOST
  UNQUALIFIED
}

enum LeadSource {
  WHATSAPP
  WEB_CHAT
  MESSENGER
  INSTAGRAM
  MANUAL
  REFERRAL
  API
  OTHER
}

model Lead {
  id               String      @id @default(uuid())
  tenantId         String
  tenant           Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name             String
  email            String?     @unique // Make email unique if it's a primary identifier
  phone            String?
  companyId        String?
  company          Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)
  source           LeadSource?
  status           LeadStatus  @default(NEW)
  assignedToUserId String?
  assignedTo       TenantUser? @relation("LeadAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  lastContactedAt  DateTime?
  notes            String?
  tags             LeadTag[]
  conversations    Conversation[] // If a lead can have multiple conversations
  opportunity      Opportunity? // If a lead converts to an opportunity

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([email])
  @@index([assignedToUserId])
}

model LeadTag {
  id         String   @id @default(uuid())
  leadId     String
  lead       Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag        String
  assignedAt DateTime @default(now())

  @@unique([leadId, tag])
  @@index([tag])
}

enum OpportunityStatus {
  QUALIFICATION
  PROPOSAL_SENT
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  ON_HOLD
}

model Opportunity {
  id               String            @id @default(uuid())
  tenantId         String
  tenant           Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name             String
  leadId           String?           @unique // Original lead this opportunity came from
  lead             Lead?             @relation(fields: [leadId], references: [id], onDelete: SetNull)
  companyId        String?
  company          Company?          @relation(fields: [companyId], references: [id], onDelete: SetNull)
  status           OpportunityStatus @default(QUALIFICATION)
  amount           Float?
  expectedCloseDate DateTime?
  assignedToUserId String?
  // assignedTo       TenantUser?       @relation("OpportunityAssignedToUser", fields: [assignedToUserId], references: [id]) // Needs opposite field in TenantUser
  notes            String?
  tags             OpportunityTag[]
  quotes           Quote[]
  projects         Project[] // An opportunity can lead to multiple projects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([leadId])
}

model OpportunityTag {
  id            String      @id @default(uuid())
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tag           String
  assignedAt    DateTime    @default(now())

  @@unique([opportunityId, tag])
  @@index([tag])
}

enum ProductType {
  PRODUCTO // Was PRODUCT
  SERVICIO // Was SERVICE
}

model Product {
  id           String      @id @default(uuid())
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name         String
  type         ProductType   @default(PRODUCTO) // PRODUCTO, SERVICIO
  description  String?
  price        Float
  sku          String?     @unique // Stock Keeping Unit, optional and unique
  category     String?
  isActive     Boolean     @default(true)
  lineItems    QuoteLineItem[]
  tags         ProductTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model ProductTag {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag        String
  assignedAt DateTime @default(now())

  @@unique([productId, tag])
  @@index([tag])
}

enum QuoteStatus {
  DRAFT // Was BORRADOR
  SENT // Was ENVIADA
  ACCEPTED // Was ACEPTADA
  REJECTED // Was RECHAZADA
  EXPIRED // New
  CANCELED // Was ANULADA
}

model Quote {
  id              String        @id @default(uuid())
  tenantId        String
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quoteNumber     String        @unique // e.g., QT-2024-001
  opportunityId   String
  opportunity     Opportunity   @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  dateCreated     DateTime      @default(now())
  expiryDate      DateTime?
  status          QuoteStatus   @default(DRAFT)
  lineItems       QuoteLineItem[]
  totalAmount     Float
  notes           String?
  termsConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([opportunityId])
}

model QuoteLineItem {
  id          String  @id @default(uuid())
  quoteId     String
  quote       Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  description String? // Can override product description for this line item
  quantity    Int
  unitPrice   Float   // Can override product price for this line item
  total       Float   // quantity * unitPrice

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quoteId])
  @@index([productId])
}

enum ProjectStatus {
  PLANNING // Was PLANIFICACION
  ACTIVE // Was ACTIVO
  COMPLETED // Was COMPLETADO
  ON_HOLD // Was EN_ESPERA
  CANCELED // Was CANCELADO
}

model Project {
  id              String            @id @default(uuid())
  tenantId        String
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  status          ProjectStatus     @default(PLANNING)
  startDate       DateTime?
  endDate         DateTime?
  deadline        DateTime?
  budget          Float?
  opportunityId   String?           @unique // Optionally linked to the originating opportunity
  opportunity     Opportunity?      @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  teamMembers     ProjectTeamMember[]
  tasks           Task[]
  tags            ProjectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model ProjectTeamMember {
  id        String     @id @default(uuid())
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String // TenantUserId
  user      TenantUser @relation("ProjectMemberToUser", fields: [userId], references: [id], onDelete: Cascade)
  role      String? // e.g., "Project Manager", "Developer"

  assignedAt DateTime @default(now())

  @@unique([projectId, userId])
}

model ProjectTag {
  id         String   @id @default(uuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag        String
  assignedAt DateTime @default(now())

  @@unique([projectId, tag])
  @@index([tag])
}

enum TaskStatus {
  PENDING // Was PENDIENTE
  IN_PROGRESS // Was EN_PROGRESO
  COMPLETED // Was COMPLETADA
  ARCHIVED // Was ARCHIVADA
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model Task {
  id               String       @id @default(uuid())
  tenantId         String
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title            String
  description      String?
  status           TaskStatus   @default(PENDING)
  priority         TaskPriority?
  dueDate          DateTime?
  assignedToUserId String?
  assignedTo       TenantUser?  @relation("TaskAssignedToUser", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  projectId        String?
  project          Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull) // Task can belong to a project
  opportunityId    String?
  // opportunity      Opportunity? @relation(fields: [opportunityId], references: [id]) // Task can be related to an opportunity, needs opposite field
  tags             TaskTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([assignedToUserId])
  @@index([projectId])
}

model TaskTag {
  id         String   @id @default(uuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag        String
  assignedAt DateTime @default(now())

  @@unique([taskId, tag])
  @@index([tag])
}


// --- Notifications ---
enum NotificationType {
  NEW_LEAD_ASSIGNED
  TASK_REMINDER
  FLOW_PUBLISHED
  MENTION
  QUOTE_STATUS_CHANGED
  SYSTEM_UPDATE
}

model Notification {
  id              String            @id @default(uuid())
  tenantId        String
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId          String? // Can be null for tenant-wide notifications
  user            TenantUser?       @relation("NotificationToUser", fields: [userId], references: [id], onDelete: Cascade)
  type            NotificationType
  title           String
  message         String
  link            String? // Link to relevant page in the app
  isRead          Boolean           @default(false)
  relatedEntityId String? // e.g., Lead ID, Task ID
  relatedEntityType String?       // e.g., "Lead", "Task"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, userId, isRead])
}

// --- Analytics (Placeholder, to be detailed) ---
model AnalyticsEvent {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type      String // e.g., "message_sent", "flow_completed", "lead_converted"
  payload   Json?
  timestamp DateTime @default(now())

  @@index([tenantId, type, timestamp])
}

// --- Audit Log (Placeholder) ---
model AuditLog {
  id            String   @id @default(uuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actorId       String? // TenantUserId who performed the action
  // actor         TenantUser? @relation(...)
  action        String // e.g., "created_lead", "updated_flow_status"
  entityType    String? // e.g., "Lead", "Flow"
  entityId      String?
  details       Json?
  timestamp     DateTime @default(now())

  @@index([tenantId, timestamp])
}
